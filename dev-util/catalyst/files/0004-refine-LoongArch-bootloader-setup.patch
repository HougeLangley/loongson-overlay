From 853b1ac497ffef0d7ea24a212301059b5b107d0a Mon Sep 17 00:00:00 2001
From: WANG Xuerui <git@xen0n.name>
Date: Wed, 6 Oct 2021 20:17:12 +0800
Subject: [PATCH 4/5] refine LoongArch bootloader setup

---
 targets/support/bootloader-setup.sh |  3 +++
 targets/support/create-iso.sh       | 36 ++++++++++++++++++++++++++++-
 targets/support/functions.sh        | 33 ++++++++++++++++++++++++++
 3 files changed, 71 insertions(+), 1 deletion(-)

diff --git a/targets/support/bootloader-setup.sh b/targets/support/bootloader-setup.sh
index 479b8cd5..393e1e86 100755
--- a/targets/support/bootloader-setup.sh
+++ b/targets/support/bootloader-setup.sh
@@ -14,6 +14,9 @@ elif [ "${clst_buildarch}" = "x86" ] || [ "${clst_buildarch}" = "amd64" ]
 then
 	#assume if there is no cdtar and we are on a supported arch that the user just wants us to handle this
 	create_bootloader $1
+elif [ "${clst_buildarch}" = "loong" ]
+then
+	create_loong_bootloader $1
 else
 	#While this seems a little crazy, it's entirely possible the bootloader is just shoved in isoroot overlay
 	echo "No cdtar and unable to auto generate boot loader files... good luck"
diff --git a/targets/support/create-iso.sh b/targets/support/create-iso.sh
index 4a9a0e4a..dedd1927 100755
--- a/targets/support/create-iso.sh
+++ b/targets/support/create-iso.sh
@@ -201,7 +201,7 @@ case ${clst_hostarch} in
 			*) die "SGI LiveCD(s) only support the 'squashfs' fstype!"	;;
 		esac
 	;;
-	ia64|loong|ppc*|powerpc*|sparc*)
+	ia64|ppc*|powerpc*|sparc*)
 		case ${clst_hostarch} in
 		sparc*) extra_opts="--sparc-boot" ;;
 		esac
@@ -209,6 +209,40 @@ case ${clst_hostarch} in
 		echo ">> Running grub-mkrescue to create iso image...."
 		grub-mkrescue ${extra_opts} -o "${1}" "${clst_target_path}"
 	;;
+	loong)
+		if [ -e "${clst_target_path}/gentoo.efimg" ]
+		then
+			echo "Found prepared EFI boot image at \
+				${clst_target_path}/gentoo.efimg"
+		else
+			echo "Preparing EFI boot image"
+
+			# prepare gentoo.efimg from clst_target_path /EFI dir
+			iaSizeTemp=$(du -sk --apparent-size "${clst_target_path}/EFI" 2>/dev/null)
+			iaSizeB=$(echo ${iaSizeTemp} | cut '-d ' -f1)
+			iaSize=$((${iaSizeB}+64)) # add slack, tested near minimum for overhead
+			echo "Creating loopback file of size ${iaSize}kB"
+			dd if=/dev/zero of="${clst_target_path}/gentoo.efimg" bs=1k \
+				count=${iaSize}
+			echo "Formatting loopback file with FAT FS"
+			mkfs.vfat -n GENTOOLIVE "${clst_target_path}/gentoo.efimg"
+
+			mkdir "${clst_target_path}/gentoo.efimg.mountPoint"
+			echo "Mounting FAT loopback file"
+			mount -t vfat -o loop "${clst_target_path}/gentoo.efimg" \
+				"${clst_target_path}/gentoo.efimg.mountPoint" || die "Failed to mount EFI image file"
+
+			echo "Populating EFI image file from ${clst_target_path}/EFI"
+			cp -rv "${clst_target_path}"/EFI/ \
+				"${clst_target_path}/gentoo.efimg.mountPoint" || die "Failed to populate EFI image file"
+
+			umount "${clst_target_path}/gentoo.efimg.mountPoint"
+			rmdir "${clst_target_path}/gentoo.efimg.mountPoint"
+		fi
+
+		echo 'Creating ISO using EFI bootloader'
+		run_mkisofs -J -R -l ${mkisofs_zisofs_opts} -V "${clst_iso_volume_id}" -o "${1}" -b gentoo.efimg -c boot.cat -no-emul-boot "${clst_target_path}"/
+	;;
 	x86|amd64)
 		# detect if an EFI bootloader is desired
 		if 	[ -d "${clst_target_path}/boot/efi" ] || \
diff --git a/targets/support/functions.sh b/targets/support/functions.sh
index 0727adb4..2f212df6 100755
--- a/targets/support/functions.sh
+++ b/targets/support/functions.sh
@@ -125,6 +125,39 @@ create_bootloader() {
   popd || die "Failed to leave livecd dir"
 }
 
+create_loong_bootloader() {
+  if [ -x "/usr/bin/grub2-mkstandalone" ]; then
+    grubmkstndaln="/usr/bin/grub2-mkstandalone"
+  elif [ -x "/usr/bin/grub-mkstandalone" ]; then
+    grubmkstndaln="/usr/bin/grub-mkstandalone"
+  else
+    die "Unable to find grub-mkstandalone"
+  fi
+
+  pushd "${1}" || die "Failed to enter livecd dir ${1}"
+
+  # while $1/grub is unused here, it triggers grub config building in bootloader-setup.sh
+  mkdir -p EFI/BOOT
+
+  #create grub-stub.cfg for embedding in grub-mkstandalone
+  echo "insmod part_gpt" > grub-stub.cfg
+  echo "insmod part_msdos" >> grub-stub.cfg
+  echo "search --no-floppy --set=root --file /livecd" >> grub-stub.cfg
+  echo "configfile /boot/grub/grub.cfg" >> grub-stub.cfg
+
+  # LoongArch firmware looks for /EFI/BOOT/BOOTLOONGARCH.EFI
+  ${grubmkstndaln} /boot/grub/grub.cfg=./grub-stub.cfg \
+    --compress=xz \
+    --modules='fat ext2' \
+    -O loongarch64-efi \
+    -o ./EFI/BOOT/BOOTLOONGARCH.EFI
+    --themes= || die "Failed to make BOOTLOONGARCH.EFI"
+  # loong has no secure boot shim support yet
+
+  rm grub-stub.cfg || echo "Failed to remove grub-stub.cfg, but this hurts nothing"
+  popd || die "Failed to leave livecd dir"
+}
+
 extract_kernels() {
 	# extract multiple kernels
 	# $1 = Destination
-- 
2.33.0

