From e96542131f3564174c80aceda2470d40b37afa3f Mon Sep 17 00:00:00 2001
From: WANG Xuerui <git@xen0n.name>
Date: Wed, 1 Sep 2021 14:26:47 +0800
Subject: [PATCH 6/7] boot: add LoongArch 64-bit support

---
 meson.build              | 3 +++
 src/boot/efi/meson.build | 4 ++--
 src/boot/efi/pe.c        | 2 ++
 3 files changed, 7 insertions(+), 2 deletions(-)

diff --git a/meson.build b/meson.build
index 738879eb21..85eaa0e52b 100644
--- a/meson.build
+++ b/meson.build
@@ -1591,6 +1591,9 @@ if get_option('efi')
         elif efi_arch == 'aarch64'
                 EFI_MACHINE_TYPE_NAME = 'aa64'
                 gnu_efi_arch = 'aarch64'
+        elif efi_arch == 'loongarch64'
+                EFI_MACHINE_TYPE_NAME = 'loongarch'
+                gnu_efi_arch = 'loongarch64'
         elif efi_arch == 'riscv64'
                 EFI_MACHINE_TYPE_NAME = 'riscv64'
                 gnu_efi_arch = 'riscv64'
diff --git a/src/boot/efi/meson.build b/src/boot/efi/meson.build
index afdf739d9b..2ba7dbac0e 100644
--- a/src/boot/efi/meson.build
+++ b/src/boot/efi/meson.build
@@ -234,8 +234,8 @@ if have_gnu_efi
                        '--build-id=sha1',
                        '-L', efi_libdir,
                        efi_crt0]
-        if ['aarch64', 'arm', 'riscv64'].contains(efi_arch)
-                # Aarch64, ARM32 and 64bit RISC-V don't have an EFI capable objcopy.
+        if ['aarch64', 'arm', 'loongarch64', 'riscv64'].contains(efi_arch)
+                # These architectures don't have an EFI capable objcopy.
                 # Use 'binary' instead, and add required symbols manually.
                 efi_ldflags += ['--defsym=EFI_SUBSYSTEM=0xa']
                 efi_format = ['-O', 'binary']
diff --git a/src/boot/efi/pe.c b/src/boot/efi/pe.c
index e657017343..d4b22a3ce4 100644
--- a/src/boot/efi/pe.c
+++ b/src/boot/efi/pe.c
@@ -32,6 +32,7 @@ struct DosFileHeader {
 #define PE_HEADER_MACHINE_X64           0x8664
 #define PE_HEADER_MACHINE_ARM64         0xaa64
 #define PE_HEADER_MACHINE_ARM           0x01c2
+#define PE_HEADER_MACHINE_LOONGARCH64   0x6264
 #define PE_HEADER_MACHINE_RISCV64       0x5064
 struct PeFileHeader {
         UINT16  Machine;
@@ -80,6 +81,7 @@ EFI_STATUS pe_memory_locate_sections(CHAR8 *base, CHAR8 **sections, UINTN *addrs
             pe->FileHeader.Machine != PE_HEADER_MACHINE_ARM64 &&
             pe->FileHeader.Machine != PE_HEADER_MACHINE_I386 &&
             pe->FileHeader.Machine != PE_HEADER_MACHINE_ARM &&
+            pe->FileHeader.Machine != PE_HEADER_MACHINE_LOONGARCH64 &&
             pe->FileHeader.Machine != PE_HEADER_MACHINE_RISCV64)
                 return EFI_LOAD_ERROR;
 
-- 
2.33.0

